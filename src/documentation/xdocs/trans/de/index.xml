<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "./dtd/document-v11.dtd">

<document>
  <header>
    <title>Willkommen zu POI !</title>
    <authors>
      <person id="AO" name="Andrew C. Oliver" email="acoliver@apache.org"/>
      <person id="GJS" name="Glen Stampoultzis" email="glens@apache.org"/>
      <person id="???" name="Jens Lorenz" email="???"/>
    </authors>
  </header>

  <body>
    <section title="Nachrichten">
      <section title="Übersetzungen">
        <p>
          Das POI-Übersetzungsprojekt hat begonnen.
          Den Anfang machen <link href="../es/index.html">spanisch</link>,
          <link href="http://www.terra-intl.com/jakarta/poi/">japanisch</link>
          und deutsch. Andere Sprachen sind herzlich willkommen.
          Machen Sie doch einfach mit !
        </p>
        <p>
          Ich bin für diese schreckliche Übersetzung traurig. Mein
          Deutschspreche ist nicht sehr gut. Wenn Sie heraus helfen,
          werden Sie die Welt von meinen schrecklichen Übersetzungen speichern!
        </p>
      </section>
      <section title="Logo-Wettbewerb ">
        <p>
          Die Wahl für das POI-Logo ist beendet. Danke für Ihre Stimmen.
        </p>
<!--        <p>-->
<!--            <link href="http://vote.sparklit.com/poll.spark/640946">Click here</link> to see the current results.-->
<!--        </p>-->
      </section>
    </section>
    <section title="Zweck">
      <p>
        Das POI Projekt besteht aus Java-APIs für die Erstellung und
        Bearbeitung von Dateiformaten, die auf dem Microsoft OLE-2
        Compound Document Datei-Format beruhen.
      </p>
      <p>
         Dateien, die auf dem OLE 2 Compound Document Datei-Format basieren
         sind unter anderem die meisten Microsoft Office Dateien, wie zum
         Beispiel Excel- und Word-Dateien.
      </p>
      <p>
        Wir versuchen, soviel wie möglich mit anderen Projekten
        zusammenzuarbeiten um diese Funktionen zu Verfügung zu stellen.
        Beispiel umfassen:
        <link href="http://xml.apache.org/cocoon">Cocoon</link>
        für das bald Generatoren und Serializer zur Verfügung stehen
        werden;
        <link href="http://www.openoffice.org">Open Office.org</link>
        mit dem wir zusammenarbeiten um das Excel-Dateiformat zu
        dokumentieren;
        und <link href="http://jakarta.apache.org/lucene">Lucene</link>
        für das bald Filter-Module zur Verfügung stehen werden.
        Wenn es sich anbietet, werden Teile des POI-Projektes and
        andere Projekte gespendet um ihnen die Nutzung von POI zu
        ermöglichen.
      </p>
      <section title="Warum und wann sollte man POI nutzen ?">
        <p>
          Wir werden das Schritt-für-Schritt erklären. POI steht für das
          gesamte Projekt.
        </p>
        <p>
          Warum sollten Sie POIFS oder HSSF nutzen ?
        </p>
        <p>
          Sie können mit POIFS Dateien oder Dokumente, die im OLE 2
          Compound Document Format geschrieben wurden, mit Java einlesen.
          Solche Dateien werden üblicherweise mit der MFC-Klassenbibliothek
          erzeugt.
          Außerdem können sie POI nutzen, um Dateien im OLE 2 Compound
          Document Format zu schreiben. Damit können sie zum Beispiel
          den Datenaustausch mit der Windows-Plattform sicherstellen.
          Wir können ruhigen Gewissens behaupten, daß POIFS die
          vollständigste Implementation dieses Datei-Formates ist.
        </p>
        <p>
          Mit HSSF können sie Excel Dateien in Java lesen und schreiben.
          Sie können auch Excel-Tabellen lesen und modifizieren. Allerdings
          ist schreiben im Moment am ausgereiftesten.
        </p>
      </section>

      <section title="Wofür steht POI ?">
        <p>
          POI steht für "Poor Obfuscation Implementation" (Schlechte
          verschleiernde Implementation).
          Warum würden wir unserem Projekt so einen abschätzigen Namen
          geben ? Nunja, das Microsoft OLE 2 Compound Document Format ist
          einfach ein schlecht durchdachtes Ding. Es ist im Wesen ein
          Datei-Archiv mit einer Struktur sehr ähnlich des alten DOS FAT
          Datei-Systemes. Die Redmonder haben, statt einfach tar, gzip,
          zip oder arc zu nutzen, ein eigenes Archiv-Format erfunden,
          welches keine standard-mäßige Verschlüsselung oder Komprimierung
          bietet, welches schlecht erweiterbar ist und dazu neigt zu
          fragementieren.
        </p>
        <p>
          POI ist auch eine Spezialität der hawaiianische Küche. Sie wird
          in <link href="http://www.m-w.com">Merriam Webster's dictionary</link>
          beschrieben als: "Ein hawaiianisches Gericht aus Taro-Wurzeln, die
          durch stampfen, kochen und kneten zu einer Paste geformt werden,
          die dann oft noch ein wenig gegärt wird." Das klang einfach sehr
          beschreibend für das Datei-Format.
        </p>
        <p>
          POI ist also eine Abkürzung. Wenn sie Abkürzungen nicht mögen,
          dann denken sie einfach bei Poi an das hawaiianischen Gericht.
          Je nachdem ob sie Abkürzungen mögen oder nicht, nutzen sie
          einfach POI oder Poi, wenn sie auf dieses Projekt verweisen.
        </p>
      </section>
    </section>


    <section title="Komponenten">
      <section title="Überblick">
        <p>
          Ein gängiges Vorurteil ist, daß POI Excel-Dateien schreibt. POI
          ist der Name für das gesamte Projekt. POI enthält mehrere

          Komponenten von denen eine namens HSSF Excel-Dateien schreibt.
          Es folgt eine Liste aller Komponenten des POI-Projektes und ein
          kurze Zusammenfassung ihres Zweckes.
        </p>
      </section>
      <section title="POIFS (POI Filesystem)">
        <p>
          POIFS ist der älteste und stabilste Teil des Projektes. POIFS
          ist unsere Portierung des OLE 2 Compound Document Formates
          in reinem Java. Es unterstützt lesen und schreiben. Alle
          anderen Komponenten basieren auf POIFS. Mehr Informationen
          gibt es auf <link href="../../poifs/index.html">der POIFS Projekt Seite</link>.
        </p>
      </section>
      <section title="HSSF (Horrible Spreadsheet Format)">
        <p>
          HSSF ist unsere Portierung des Microsoft Excel 97(-2002)
          Datei-Formates in reinem Java. Es unterstützt lesen und
          schreiben. Mehr Informationen gibt es auf
          <link href="../../hssf/index.html">der HSSF Projekt Seite</link>.
        </p>
      </section>
      <section title="HDF (Horrible Document Format)">
        <p>
          HDF ist unsere Portierung des Microsoft Word 97 Datei-Formates
          in reinem Java. Es unterstützt lesen und schreiben. Mehr
          Informationen gibt es auf
          <link href="../../hdf/index.html">der HDF Projekt Seite</link>.
          Diese Komponente ist noch sehr jung.
        </p>
      </section>
      <section title="HPSF (Horrible Property Set Format)">
        <p>
          HPSF ist unsere Portierung des OLE 2 Property Formate.
          Property Sets werden häufig genutzt um Metadaten eines
          Dokumentes wie Titel, Autor und Datum zu speichern. Sie
          können aber auch für applikationsspezifische Anwendungen
          genutzt werden. Mehr Informationen gibt es auf
          <link href="../../hpsf/index.html">der HPSF Projekt Seite</link>.
        </p>
      </section>
    </section>
    <section title="Wo ist der HSSF Serializer ?">
      <p>
        Der HSSF Serializer (Teil der Version 1.0 und der letzten Versionen
        von <link href="http://www.sourceforge.net/projects/poi">Sourceforge</link>)
        wurde an das <link href="http://xml.apache.org/cocoon/">Cocoon</link>-Projekt
        gespendet und ist Teil von Cocoon ab Version 2.0.2.
      </p>
    </section>
    <section title="Beitragen">
      <p>
        Sie möchten also etwas zu diesem Projekt beitragen ? Hervorragend !
        Wir brauchen immer begeisterte, fleißige und talentierte Leute, die
        uns bei den verschiedene Aspekten des Projektes helfen. Nummer eins
        sind Fehlerberichte und Vorschläge für neue Funktionen. Nummer zwei
        ist die Dokumentation. Egal ob sie Kritik, Vorschläge haben oder
        selbst beitragen möchten; sie werden bei uns immer ein offenes Ohr
        finden. Und zu guter letzt brauchen wir Java-Programmierer die
        sich durch die zahlreichen Ecken und Kanten des Microsoft
        Datei-Formates arbeiten und uns dabei helfen, die neuen
        Datei-Formate auf die Java-Plattform zu portieren.
      </p>
      <p>
        Wenn sie motiviert, bereit sind und Zeit haben, tragen sie sich
        einfach in Mailing-Listen ein und machen sie einfach mit. Wir
        werden bei Startschwierigkeiten gerne helfen.
      </p>
    </section>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Apache Software Foundation All rights reserved.
      $Revision$ $Date$
    </legal>
  </footer>
</document>

