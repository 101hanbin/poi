<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../dtd/document-v10.dtd">

<document>
 <header>
  <title>PoiFS</title>
  <subtitle>Overview</subtitle>
  <authors>
   <person name="Andrew C. Oliver" email="acoliver@apache.org"/>     
   <person name="Nicola Ken Barozzi" email="barozzi@nicolaken.com"/>     
  </authors>
 </header>

 <body>
 <s1 title="Overview">

  <p>POIFS is a pure Java implementation of the OLE 2 Compound Document format.</p>
  <p>
  	By very definition, all APIs developed by the POI project are based somehow 
        on the POIFS API.
  </p>
  <p>
        A common confusion is on just what POIFS buys you or what OLE 2 Compound
        Document format IS exactly.  POIFS does not buy you DOC, or XLS
        but is necessary to generate DOCs or XLS files.  You see all file
        formats based on the OLE 2 Compound Document Format have a common
        structure.  The OLE 2 Compound Document Format is essentially a
        convoluted archive format.  Think of POIFS as a "zip" library.  So once
        you can get at the data in a zip file you still need to interperate the
        data.  As a general rule, while all of our formats USE POIFS, most of
        them attempt to abstract you from it.  There are some circumstances
        where this is not possible, but as a general rule this is ture.        
  </p>
  <p>
        If you're an enduser type just looking to generate XLS files, then you'd
        be looking for HSSF not POIFS; however, if you have legacy code that
        uses MFC property sets.  POIFS is for you!  Regarless, you may or may
        not need to know how to use POIFS but ultimately if you use technologies
        that come from the POI project, you're using POIFS underneith.  Perhaps
        we should have a branding campaign "POIFS Inside!".  ;-)
  </p>
  <p> TODO: copy POIFS docs and port to XML.  For now please reference <link href="http://poi.sourceforge.net">old site</link>.
  </p>
  </s1>
 </body>
</document>
